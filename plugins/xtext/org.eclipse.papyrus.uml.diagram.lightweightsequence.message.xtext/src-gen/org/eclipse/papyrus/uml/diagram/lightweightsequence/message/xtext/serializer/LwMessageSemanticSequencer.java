/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.AnyMessage;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.BooleanValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.IntegerValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.LwMessagePackage;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.MessageArgument;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.MessageReplyOutput;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.NullValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.RealValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.ReplyMessage;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.RequestMessage;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.StringValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.UndefinedRule;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.UnlimitedNaturalValue;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.lwMessage.WildcardMessageArgument;
import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.services.LwMessageGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LwMessageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LwMessageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LwMessagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LwMessagePackage.ANY_MESSAGE:
				sequence_AnyMessage(context, (AnyMessage) semanticObject); 
				return; 
			case LwMessagePackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case LwMessagePackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case LwMessagePackage.MESSAGE_ARGUMENT:
				if (rule == grammarAccess.getMessageRequestArgumentWithNameRule()
						|| rule == grammarAccess.getMessageRequestNameAndValueRule()) {
					sequence_MessageRequestNameAndValue_MessageRequestValue(context, (MessageArgument) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRequestArgumentRule()) {
					sequence_MessageRequestValue(context, (MessageArgument) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOutputValueRule()) {
					sequence_OutputValue(context, (MessageArgument) semanticObject); 
					return; 
				}
				else break;
			case LwMessagePackage.MESSAGE_REPLY_OUTPUT:
				sequence_AssignmentTarget_MessageReplyOutput(context, (MessageReplyOutput) semanticObject); 
				return; 
			case LwMessagePackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case LwMessagePackage.REAL_VALUE:
				sequence_RealValue(context, (RealValue) semanticObject); 
				return; 
			case LwMessagePackage.REPLY_MESSAGE:
				sequence_AssignmentTarget_MessageReplyOutputs_ReplyMessage(context, (ReplyMessage) semanticObject); 
				return; 
			case LwMessagePackage.REQUEST_MESSAGE:
				sequence_MessageRequestArguments_RequestMessage(context, (RequestMessage) semanticObject); 
				return; 
			case LwMessagePackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case LwMessagePackage.UNDEFINED_RULE:
				sequence_UndefinedRule(context, (UndefinedRule) semanticObject); 
				return; 
			case LwMessagePackage.UNLIMITED_NATURAL_VALUE:
				sequence_UnlimitedNaturalValue(context, (UnlimitedNaturalValue) semanticObject); 
				return; 
			case LwMessagePackage.WILDCARD_MESSAGE_ARGUMENT:
				sequence_MessageRequestArgument(context, (WildcardMessageArgument) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractMessage returns AnyMessage
	 *     AbstractRequestMessage returns AnyMessage
	 *     AnyMessage returns AnyMessage
	 *
	 * Constraint:
	 *     {AnyMessage}
	 */
	protected void sequence_AnyMessage(ISerializationContext context, AnyMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageReplyOutput returns MessageReplyOutput
	 *
	 * Constraint:
	 *     ((target=[ConnectableElement|QName] parameter=[Parameter|ID] value=OutputValue?) | (parameter=[Parameter|ID] value=OutputValue))
	 */
	protected void sequence_AssignmentTarget_MessageReplyOutput(ISerializationContext context, MessageReplyOutput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMessage returns ReplyMessage
	 *     ReplyMessage returns ReplyMessage
	 *
	 * Constraint:
	 *     (
	 *         target=[ConnectableElement|QName]? 
	 *         (name=Name | operation=[Operation|ID]) 
	 *         (outputs+=MessageReplyOutput outputs+=MessageReplyOutput*)? 
	 *         value=OutputValue?
	 *     )
	 */
	protected void sequence_AssignmentTarget_MessageReplyOutputs_ReplyMessage(ISerializationContext context, ReplyMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=Boolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntegerValue
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageRequestArgument returns WildcardMessageArgument
	 *
	 * Constraint:
	 *     {WildcardMessageArgument}
	 */
	protected void sequence_MessageRequestArgument(ISerializationContext context, WildcardMessageArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMessage returns RequestMessage
	 *     AbstractRequestMessage returns RequestMessage
	 *     RequestMessage returns RequestMessage
	 *
	 * Constraint:
	 *     (
	 *         (name=Name | signal=[Signal|ID] | operation=[Operation|ID]) 
	 *         (
	 *             (arguments+=MessageRequestArgument arguments+=MessageRequestArgument*) | 
	 *             (arguments+=MessageRequestArgumentWithName arguments+=MessageRequestArgumentWithName*)
	 *         )?
	 *     )
	 */
	protected void sequence_MessageRequestArguments_RequestMessage(ISerializationContext context, RequestMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageRequestArgumentWithName returns MessageArgument
	 *     MessageRequestNameAndValue returns MessageArgument
	 *
	 * Constraint:
	 *     ((name=Name | property=[Property|ID] | parameter=[Parameter|ID]) value=Value)
	 */
	protected void sequence_MessageRequestNameAndValue_MessageRequestValue(ISerializationContext context, MessageArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageRequestArgument returns MessageArgument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_MessageRequestValue(ISerializationContext context, MessageArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.MESSAGE_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.MESSAGE_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageRequestValueAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     {NullValue}
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OutputValue returns MessageArgument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_OutputValue(ISerializationContext context, MessageArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.MESSAGE_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.MESSAGE_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputValueAccess().getValueValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns RealValue
	 *     RealValue returns RealValue
	 *
	 * Constraint:
	 *     value=Double
	 */
	protected void sequence_RealValue(ISerializationContext context, RealValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.REAL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.REAL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealValueAccess().getValueDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UndefinedRule returns UndefinedRule
	 *
	 * Constraint:
	 *     value='<Undefined>'
	 */
	protected void sequence_UndefinedRule(ISerializationContext context, UndefinedRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.UNDEFINED_RULE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.UNDEFINED_RULE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUndefinedRuleAccess().getValueUndefinedKeyword_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns UnlimitedNaturalValue
	 *     UnlimitedNaturalValue returns UnlimitedNaturalValue
	 *
	 * Constraint:
	 *     value=UnlimitedNatural
	 */
	protected void sequence_UnlimitedNaturalValue(ISerializationContext context, UnlimitedNaturalValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LwMessagePackage.Literals.UNLIMITED_NATURAL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LwMessagePackage.Literals.UNLIMITED_NATURAL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnlimitedNaturalValueAccess().getValueUnlimitedNaturalParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
