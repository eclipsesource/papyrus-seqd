/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.papyrus.uml.alf.services.CommonGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LwMessageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AbstractMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.AbstractMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractRequestMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReplyMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMessage:
		//	AbstractRequestMessage | ReplyMessage;
		@Override public ParserRule getRule() { return rule; }

		//AbstractRequestMessage | ReplyMessage
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractRequestMessage
		public RuleCall getAbstractRequestMessageParserRuleCall_0() { return cAbstractRequestMessageParserRuleCall_0; }

		//ReplyMessage
		public RuleCall getReplyMessageParserRuleCall_1() { return cReplyMessageParserRuleCall_1; }
	}

	public class AbstractRequestMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.AbstractRequestMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnyMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequestMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractRequestMessage AbstractMessage:
		//	AnyMessage | RequestMessage;
		@Override public ParserRule getRule() { return rule; }

		//AnyMessage | RequestMessage
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnyMessage
		public RuleCall getAnyMessageParserRuleCall_0() { return cAnyMessageParserRuleCall_0; }

		//RequestMessage
		public RuleCall getRequestMessageParserRuleCall_1() { return cRequestMessageParserRuleCall_1; }
	}

	public class RequestMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.RequestMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cSignalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_0_1_0 = (CrossReference)cSignalAssignment_0_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSignalSignalCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperationAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final CrossReference cOperationOperationCrossReference_0_2_0 = (CrossReference)cOperationAssignment_0_2.eContents().get(0);
		private final RuleCall cOperationOperationIDTerminalRuleCall_0_2_0_1 = (RuleCall)cOperationOperationCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMessageRequestArgumentsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RequestMessage:
		//	(=> name=Name |
		//	// These are only here to trigger content-assist for signal and operation signatures.
		//	// They can never be matched because the name always will be.
		//	=> signal=[uml::Signal] | => operation=[uml::Operation]) ('(' MessageRequestArguments? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//(=> name=Name | // These are only here to trigger content-assist for signal and operation signatures.
		//// They can never be matched because the name always will be.
		//=> signal=[uml::Signal] | => operation=[uml::Operation]) ('(' MessageRequestArguments? ')')?
		public Group getGroup() { return cGroup; }

		//=> name=Name | // These are only here to trigger content-assist for signal and operation signatures.
		//// They can never be matched because the name always will be.
		//=> signal=[uml::Signal] | => operation=[uml::Operation]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//=> name=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//// These are only here to trigger content-assist for signal and operation signatures.
		//// They can never be matched because the name always will be.
		//=> signal=[uml::Signal]
		public Assignment getSignalAssignment_0_1() { return cSignalAssignment_0_1; }

		//[uml::Signal]
		public CrossReference getSignalSignalCrossReference_0_1_0() { return cSignalSignalCrossReference_0_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_1_0_1() { return cSignalSignalIDTerminalRuleCall_0_1_0_1; }

		//=> operation=[uml::Operation]
		public Assignment getOperationAssignment_0_2() { return cOperationAssignment_0_2; }

		//[uml::Operation]
		public CrossReference getOperationOperationCrossReference_0_2_0() { return cOperationOperationCrossReference_0_2_0; }

		//ID
		public RuleCall getOperationOperationIDTerminalRuleCall_0_2_0_1() { return cOperationOperationIDTerminalRuleCall_0_2_0_1; }

		//('(' MessageRequestArguments? ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//MessageRequestArguments?
		public RuleCall getMessageRequestArgumentsParserRuleCall_1_1() { return cMessageRequestArgumentsParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AnyMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.AnyMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AnyMessage:
		//	{AnyMessage} "*";
		@Override public ParserRule getRule() { return rule; }

		//{AnyMessage} "*"
		public Group getGroup() { return cGroup; }

		//{AnyMessage}
		public Action getAnyMessageAction_0() { return cAnyMessageAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class MessageRequestArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageRequestArguments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentsMessageRequestArgumentParserRuleCall_0_0_0 = (RuleCall)cArgumentsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cArgumentsMessageRequestArgumentParserRuleCall_0_1_1_0 = (RuleCall)cArgumentsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsMessageRequestArgumentWithNameParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsMessageRequestArgumentWithNameParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		
		//fragment MessageRequestArguments:
		//	arguments+=MessageRequestArgument ("," arguments+=MessageRequestArgument)* | arguments+=MessageRequestArgumentWithName
		//	("," arguments+=MessageRequestArgumentWithName)*;
		@Override public ParserRule getRule() { return rule; }

		//arguments+=MessageRequestArgument ("," arguments+=MessageRequestArgument)* | arguments+=MessageRequestArgumentWithName
		//("," arguments+=MessageRequestArgumentWithName)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//arguments+=MessageRequestArgument ("," arguments+=MessageRequestArgument)*
		public Group getGroup_0() { return cGroup_0; }

		//arguments+=MessageRequestArgument
		public Assignment getArgumentsAssignment_0_0() { return cArgumentsAssignment_0_0; }

		//MessageRequestArgument
		public RuleCall getArgumentsMessageRequestArgumentParserRuleCall_0_0_0() { return cArgumentsMessageRequestArgumentParserRuleCall_0_0_0; }

		//("," arguments+=MessageRequestArgument)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//arguments+=MessageRequestArgument
		public Assignment getArgumentsAssignment_0_1_1() { return cArgumentsAssignment_0_1_1; }

		//MessageRequestArgument
		public RuleCall getArgumentsMessageRequestArgumentParserRuleCall_0_1_1_0() { return cArgumentsMessageRequestArgumentParserRuleCall_0_1_1_0; }

		//arguments+=MessageRequestArgumentWithName ("," arguments+=MessageRequestArgumentWithName)*
		public Group getGroup_1() { return cGroup_1; }

		//arguments+=MessageRequestArgumentWithName
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }

		//MessageRequestArgumentWithName
		public RuleCall getArgumentsMessageRequestArgumentWithNameParserRuleCall_1_0_0() { return cArgumentsMessageRequestArgumentWithNameParserRuleCall_1_0_0; }

		//("," arguments+=MessageRequestArgumentWithName)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//arguments+=MessageRequestArgumentWithName
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }

		//MessageRequestArgumentWithName
		public RuleCall getArgumentsMessageRequestArgumentWithNameParserRuleCall_1_1_1_0() { return cArgumentsMessageRequestArgumentWithNameParserRuleCall_1_1_1_0; }
	}

	public class MessageRequestArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageRequestArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWildcardMessageArgumentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cMessageRequestValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageRequestArgument MessageArgument:
		//	{WildcardMessageArgument} -> '-' | MessageRequestValue;
		@Override public ParserRule getRule() { return rule; }

		//{WildcardMessageArgument} -> '-' | MessageRequestValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//{WildcardMessageArgument} -> '-'
		public Group getGroup_0() { return cGroup_0; }

		//{WildcardMessageArgument}
		public Action getWildcardMessageArgumentAction_0_0() { return cWildcardMessageArgumentAction_0_0; }

		//-> '-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//MessageRequestValue
		public RuleCall getMessageRequestValueParserRuleCall_1() { return cMessageRequestValueParserRuleCall_1; }
	}

	public class MessageRequestArgumentWithNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageRequestArgumentWithName");
		private final RuleCall cMessageRequestNameAndValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MessageRequestArgumentWithName MessageArgument:
		//	MessageRequestNameAndValue;
		@Override public ParserRule getRule() { return rule; }

		//MessageRequestNameAndValue
		public RuleCall getMessageRequestNameAndValueParserRuleCall() { return cMessageRequestNameAndValueParserRuleCall; }
	}

	public class MessageRequestNameAndValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageRequestNameAndValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cPropertyPropertyCrossReference_0_1_0 = (CrossReference)cPropertyAssignment_0_1.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_0_1_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final CrossReference cParameterParameterCrossReference_0_2_0 = (CrossReference)cParameterAssignment_0_2.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_2_0_1 = (RuleCall)cParameterParameterCrossReference_0_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMessageRequestValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MessageRequestNameAndValue MessageArgument:
		//	(=> name=Name |
		//	// These are only here to trigger content-assist for the signal attributes
		//	// and operation parameters.  They can never be matched because the name
		//	// always will be.
		//	=> property=[uml::Property] | => parameter=[uml::Parameter]) '=' MessageRequestValue;
		@Override public ParserRule getRule() { return rule; }

		//(=> name=Name | // These are only here to trigger content-assist for the signal attributes
		//// and operation parameters.  They can never be matched because the name
		//// always will be.
		//=> property=[uml::Property] | => parameter=[uml::Parameter]) '=' MessageRequestValue
		public Group getGroup() { return cGroup; }

		//=> name=Name | // These are only here to trigger content-assist for the signal attributes
		//// and operation parameters.  They can never be matched because the name
		//// always will be.
		//=> property=[uml::Property] | => parameter=[uml::Parameter]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//=> name=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//// These are only here to trigger content-assist for the signal attributes
		//// and operation parameters.  They can never be matched because the name
		//// always will be.
		//=> property=[uml::Property]
		public Assignment getPropertyAssignment_0_1() { return cPropertyAssignment_0_1; }

		//[uml::Property]
		public CrossReference getPropertyPropertyCrossReference_0_1_0() { return cPropertyPropertyCrossReference_0_1_0; }

		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_0_1_0_1() { return cPropertyPropertyIDTerminalRuleCall_0_1_0_1; }

		//=> parameter=[uml::Parameter]
		public Assignment getParameterAssignment_0_2() { return cParameterAssignment_0_2; }

		//[uml::Parameter]
		public CrossReference getParameterParameterCrossReference_0_2_0() { return cParameterParameterCrossReference_0_2_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_2_0_1() { return cParameterParameterIDTerminalRuleCall_0_2_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//MessageRequestValue
		public RuleCall getMessageRequestValueParserRuleCall_2() { return cMessageRequestValueParserRuleCall_2; }
	}

	public class MessageRequestValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageRequestValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//fragment MessageRequestValue returns MessageArgument:
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }

		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}

	public class ReplyMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.ReplyMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentTargetParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cOperationOperationCrossReference_1_1_0 = (CrossReference)cOperationAssignment_1_1.eContents().get(0);
		private final RuleCall cOperationOperationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOperationOperationCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cMessageReplyOutputsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueOutputValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ReplyMessage:
		//	AssignmentTarget? (=> name=Name |
		//	// This is only here to trigger content-assist for operation signatures.
		//	// It can never be matched because the name always will be.
		//	=> operation=[uml::Operation]) ('(' MessageReplyOutputs? ')')?
		//	value=OutputValue?;
		@Override public ParserRule getRule() { return rule; }

		//AssignmentTarget? (=> name=Name | // This is only here to trigger content-assist for operation signatures.
		//// It can never be matched because the name always will be.
		//=> operation=[uml::Operation]) ('(' MessageReplyOutputs? ')')? value=OutputValue?
		public Group getGroup() { return cGroup; }

		//AssignmentTarget?
		public RuleCall getAssignmentTargetParserRuleCall_0() { return cAssignmentTargetParserRuleCall_0; }

		//=> name=Name | // This is only here to trigger content-assist for operation signatures.
		//// It can never be matched because the name always will be.
		//=> operation=[uml::Operation]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> name=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//// This is only here to trigger content-assist for operation signatures.
		//// It can never be matched because the name always will be.
		//=> operation=[uml::Operation]
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }

		//[uml::Operation]
		public CrossReference getOperationOperationCrossReference_1_1_0() { return cOperationOperationCrossReference_1_1_0; }

		//ID
		public RuleCall getOperationOperationIDTerminalRuleCall_1_1_0_1() { return cOperationOperationIDTerminalRuleCall_1_1_0_1; }

		//('(' MessageReplyOutputs? ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//MessageReplyOutputs?
		public RuleCall getMessageReplyOutputsParserRuleCall_2_1() { return cMessageReplyOutputsParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//value=OutputValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//OutputValue
		public RuleCall getValueOutputValueParserRuleCall_3_0() { return cValueOutputValueParserRuleCall_3_0; }
	}

	public class AssignmentTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.AssignmentTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetConnectableElementCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetConnectableElementQNameParserRuleCall_0_0_1 = (RuleCall)cTargetConnectableElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//fragment AssignmentTarget:
		//	=> target=[uml::ConnectableElement|QName] '=';
		@Override public ParserRule getRule() { return rule; }

		//=> target=[uml::ConnectableElement|QName] '='
		public Group getGroup() { return cGroup; }

		//=> target=[uml::ConnectableElement|QName]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[uml::ConnectableElement|QName]
		public CrossReference getTargetConnectableElementCrossReference_0_0() { return cTargetConnectableElementCrossReference_0_0; }

		//QName
		public RuleCall getTargetConnectableElementQNameParserRuleCall_0_0_1() { return cTargetConnectableElementQNameParserRuleCall_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}

	public class MessageReplyOutputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageReplyOutputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutputsMessageReplyOutputParserRuleCall_0_0 = (RuleCall)cOutputsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOutputsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOutputsMessageReplyOutputParserRuleCall_1_1_0 = (RuleCall)cOutputsAssignment_1_1.eContents().get(0);
		
		//fragment MessageReplyOutputs:
		//	outputs+=MessageReplyOutput ("," outputs+=MessageReplyOutput)*;
		@Override public ParserRule getRule() { return rule; }

		//outputs+=MessageReplyOutput ("," outputs+=MessageReplyOutput)*
		public Group getGroup() { return cGroup; }

		//outputs+=MessageReplyOutput
		public Assignment getOutputsAssignment_0() { return cOutputsAssignment_0; }

		//MessageReplyOutput
		public RuleCall getOutputsMessageReplyOutputParserRuleCall_0_0() { return cOutputsMessageReplyOutputParserRuleCall_0_0; }

		//("," outputs+=MessageReplyOutput)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//outputs+=MessageReplyOutput
		public Assignment getOutputsAssignment_1_1() { return cOutputsAssignment_1_1; }

		//MessageReplyOutput
		public RuleCall getOutputsMessageReplyOutputParserRuleCall_1_1_0() { return cOutputsMessageReplyOutputParserRuleCall_1_1_0; }
	}

	public class MessageReplyOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.MessageReplyOutput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentTargetParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cParameterAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0_1_0 = (CrossReference)cParameterAssignment_0_1.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1_0_1 = (RuleCall)cParameterParameterCrossReference_0_1_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueOutputValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParameterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_1_0_0 = (CrossReference)cParameterAssignment_1_0.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_1_0_0_1 = (RuleCall)cParameterParameterCrossReference_1_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueOutputValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//MessageReplyOutput:
		//	AssignmentTarget parameter=[uml::Parameter] value=OutputValue? | parameter=[uml::Parameter] value=OutputValue;
		@Override public ParserRule getRule() { return rule; }

		//AssignmentTarget parameter=[uml::Parameter] value=OutputValue? | parameter=[uml::Parameter] value=OutputValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentTarget parameter=[uml::Parameter] value=OutputValue?
		public Group getGroup_0() { return cGroup_0; }

		//AssignmentTarget
		public RuleCall getAssignmentTargetParserRuleCall_0_0() { return cAssignmentTargetParserRuleCall_0_0; }

		//parameter=[uml::Parameter]
		public Assignment getParameterAssignment_0_1() { return cParameterAssignment_0_1; }

		//[uml::Parameter]
		public CrossReference getParameterParameterCrossReference_0_1_0() { return cParameterParameterCrossReference_0_1_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1_0_1() { return cParameterParameterIDTerminalRuleCall_0_1_0_1; }

		//value=OutputValue?
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//OutputValue
		public RuleCall getValueOutputValueParserRuleCall_0_2_0() { return cValueOutputValueParserRuleCall_0_2_0; }

		//parameter=[uml::Parameter] value=OutputValue
		public Group getGroup_1() { return cGroup_1; }

		//parameter=[uml::Parameter]
		public Assignment getParameterAssignment_1_0() { return cParameterAssignment_1_0; }

		//[uml::Parameter]
		public CrossReference getParameterParameterCrossReference_1_0_0() { return cParameterParameterCrossReference_1_0_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_1_0_0_1() { return cParameterParameterIDTerminalRuleCall_1_0_0_1; }

		//value=OutputValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//OutputValue
		public RuleCall getValueOutputValueParserRuleCall_1_1_0() { return cValueOutputValueParserRuleCall_1_1_0; }
	}

	public class OutputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.OutputValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OutputValue MessageArgument:
		//	':' value=Value;
		@Override public ParserRule getRule() { return rule; }

		//':' value=Value
		public Group getGroup() { return cGroup; }

		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnlimitedNaturalValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///**
		// * We have to simulate the UML ValueSpecification instead of using it as is
		// * because otherwise the user will see warnings in the direct editor about
		// * elements that must be owned (the value specifications) not having owners
		// * (in the UML sense).
		// */ Value:
		//	BooleanValue |
		//	=> IntegerValue |
		//	=> UnlimitedNaturalValue |
		//	=> RealValue | NullValue | StringValue;
		@Override public ParserRule getRule() { return rule; }

		//BooleanValue | => IntegerValue | => UnlimitedNaturalValue | => RealValue | NullValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }

		//=> IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }

		//=> UnlimitedNaturalValue
		public RuleCall getUnlimitedNaturalValueParserRuleCall_2() { return cUnlimitedNaturalValueParserRuleCall_2; }

		//=> RealValue
		public RuleCall getRealValueParserRuleCall_3() { return cRealValueParserRuleCall_3; }

		//NullValue
		public RuleCall getNullValueParserRuleCall_4() { return cNullValueParserRuleCall_4; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_5() { return cStringValueParserRuleCall_5; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=Boolean;
		@Override public ParserRule getRule() { return rule; }

		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Boolean
		public RuleCall getValueBooleanParserRuleCall_0() { return cValueBooleanParserRuleCall_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class UnlimitedNaturalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.UnlimitedNaturalValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueUnlimitedNaturalParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//UnlimitedNaturalValue:
		//	value=UnlimitedNatural;
		@Override public ParserRule getRule() { return rule; }

		//value=UnlimitedNatural
		public Assignment getValueAssignment() { return cValueAssignment; }

		//UnlimitedNatural
		public RuleCall getValueUnlimitedNaturalParserRuleCall_0() { return cValueUnlimitedNaturalParserRuleCall_0; }
	}

	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.RealValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealValue:
		//	value=Double;
		@Override public ParserRule getRule() { return rule; }

		//value=Double
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_0() { return cValueDoubleParserRuleCall_0; }
	}

	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.NullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullValue:
		//	{NullValue} 'null';
		@Override public ParserRule getRule() { return rule; }

		//{NullValue} 'null'
		public Group getGroup() { return cGroup; }

		//{NullValue}
		public Action getNullValueAction_0() { return cNullValueAction_0; }

		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class UndefinedRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.UndefinedRule");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueUndefinedKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//UndefinedRule:
		//	value='<Undefined>';
		@Override public ParserRule getRule() { return rule; }

		//value='<Undefined>'
		public Assignment getValueAssignment() { return cValueAssignment; }

		//'<Undefined>'
		public Keyword getValueUndefinedKeyword_0() { return cValueUndefinedKeyword_0; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.Double");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Double ecore::EDouble:
		//	INT | REAL;
		@Override public ParserRule getRule() { return rule; }

		//INT | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//REAL
		public RuleCall getREALTerminalRuleCall_1() { return cREALTerminalRuleCall_1; }
	}

	public class UnlimitedNaturalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.UnlimitedNatural");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnlimitedNatural ecore::EIntegerObject:
		//	Integer | '*';
		@Override public ParserRule getRule() { return rule; }

		//Integer | '*'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.Integer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNEG_INTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Integer ecore::EIntegerObject:
		//	INT | NEG_INT;
		@Override public ParserRule getRule() { return rule; }

		//INT | NEG_INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//NEG_INT
		public RuleCall getNEG_INTTerminalRuleCall_1() { return cNEG_INTTerminalRuleCall_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }

		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	Name ('::' Name)*;
		@Override public ParserRule getRule() { return rule; }

		//Name ('::' Name)*
		public Group getGroup() { return cGroup; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//('::' Name)*
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.Name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final AbstractMessageElements pAbstractMessage;
	private final AbstractRequestMessageElements pAbstractRequestMessage;
	private final RequestMessageElements pRequestMessage;
	private final AnyMessageElements pAnyMessage;
	private final MessageRequestArgumentsElements pMessageRequestArguments;
	private final MessageRequestArgumentElements pMessageRequestArgument;
	private final MessageRequestArgumentWithNameElements pMessageRequestArgumentWithName;
	private final MessageRequestNameAndValueElements pMessageRequestNameAndValue;
	private final MessageRequestValueElements pMessageRequestValue;
	private final ReplyMessageElements pReplyMessage;
	private final AssignmentTargetElements pAssignmentTarget;
	private final MessageReplyOutputsElements pMessageReplyOutputs;
	private final MessageReplyOutputElements pMessageReplyOutput;
	private final OutputValueElements pOutputValue;
	private final ValueElements pValue;
	private final BooleanValueElements pBooleanValue;
	private final IntegerValueElements pIntegerValue;
	private final UnlimitedNaturalValueElements pUnlimitedNaturalValue;
	private final RealValueElements pRealValue;
	private final NullValueElements pNullValue;
	private final StringValueElements pStringValue;
	private final UndefinedRuleElements pUndefinedRule;
	private final DoubleElements pDouble;
	private final UnlimitedNaturalElements pUnlimitedNatural;
	private final IntegerElements pInteger;
	private final BooleanElements pBoolean;
	private final QNameElements pQName;
	private final NameElements pName;
	private final TerminalRule tDIGITS;
	private final TerminalRule tDIGIT;
	private final TerminalRule tDIGIT0;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tINT;
	private final TerminalRule tNEG_INT;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LwMessageGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarAccess gaCommon,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.gaTerminals = gaTerminals;
		this.pAbstractMessage = new AbstractMessageElements();
		this.pAbstractRequestMessage = new AbstractRequestMessageElements();
		this.pRequestMessage = new RequestMessageElements();
		this.pAnyMessage = new AnyMessageElements();
		this.pMessageRequestArguments = new MessageRequestArgumentsElements();
		this.pMessageRequestArgument = new MessageRequestArgumentElements();
		this.pMessageRequestArgumentWithName = new MessageRequestArgumentWithNameElements();
		this.pMessageRequestNameAndValue = new MessageRequestNameAndValueElements();
		this.pMessageRequestValue = new MessageRequestValueElements();
		this.pReplyMessage = new ReplyMessageElements();
		this.pAssignmentTarget = new AssignmentTargetElements();
		this.pMessageReplyOutputs = new MessageReplyOutputsElements();
		this.pMessageReplyOutput = new MessageReplyOutputElements();
		this.pOutputValue = new OutputValueElements();
		this.pValue = new ValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pUnlimitedNaturalValue = new UnlimitedNaturalValueElements();
		this.pRealValue = new RealValueElements();
		this.pNullValue = new NullValueElements();
		this.pStringValue = new StringValueElements();
		this.pUndefinedRule = new UndefinedRuleElements();
		this.pDouble = new DoubleElements();
		this.pUnlimitedNatural = new UnlimitedNaturalElements();
		this.pInteger = new IntegerElements();
		this.pBoolean = new BooleanElements();
		this.pQName = new QNameElements();
		this.pName = new NameElements();
		this.tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.DIGITS");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.DIGIT");
		this.tDIGIT0 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.DIGIT0");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.DECIMAL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.INT");
		this.tNEG_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.NEG_INT");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage.REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.LwMessage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AbstractMessage:
	//	AbstractRequestMessage | ReplyMessage;
	public AbstractMessageElements getAbstractMessageAccess() {
		return pAbstractMessage;
	}
	
	public ParserRule getAbstractMessageRule() {
		return getAbstractMessageAccess().getRule();
	}

	//AbstractRequestMessage AbstractMessage:
	//	AnyMessage | RequestMessage;
	public AbstractRequestMessageElements getAbstractRequestMessageAccess() {
		return pAbstractRequestMessage;
	}
	
	public ParserRule getAbstractRequestMessageRule() {
		return getAbstractRequestMessageAccess().getRule();
	}

	//RequestMessage:
	//	(=> name=Name |
	//	// These are only here to trigger content-assist for signal and operation signatures.
	//	// They can never be matched because the name always will be.
	//	=> signal=[uml::Signal] | => operation=[uml::Operation]) ('(' MessageRequestArguments? ')')?;
	public RequestMessageElements getRequestMessageAccess() {
		return pRequestMessage;
	}
	
	public ParserRule getRequestMessageRule() {
		return getRequestMessageAccess().getRule();
	}

	//AnyMessage:
	//	{AnyMessage} "*";
	public AnyMessageElements getAnyMessageAccess() {
		return pAnyMessage;
	}
	
	public ParserRule getAnyMessageRule() {
		return getAnyMessageAccess().getRule();
	}

	//fragment MessageRequestArguments:
	//	arguments+=MessageRequestArgument ("," arguments+=MessageRequestArgument)* | arguments+=MessageRequestArgumentWithName
	//	("," arguments+=MessageRequestArgumentWithName)*;
	public MessageRequestArgumentsElements getMessageRequestArgumentsAccess() {
		return pMessageRequestArguments;
	}
	
	public ParserRule getMessageRequestArgumentsRule() {
		return getMessageRequestArgumentsAccess().getRule();
	}

	//MessageRequestArgument MessageArgument:
	//	{WildcardMessageArgument} -> '-' | MessageRequestValue;
	public MessageRequestArgumentElements getMessageRequestArgumentAccess() {
		return pMessageRequestArgument;
	}
	
	public ParserRule getMessageRequestArgumentRule() {
		return getMessageRequestArgumentAccess().getRule();
	}

	//MessageRequestArgumentWithName MessageArgument:
	//	MessageRequestNameAndValue;
	public MessageRequestArgumentWithNameElements getMessageRequestArgumentWithNameAccess() {
		return pMessageRequestArgumentWithName;
	}
	
	public ParserRule getMessageRequestArgumentWithNameRule() {
		return getMessageRequestArgumentWithNameAccess().getRule();
	}

	//MessageRequestNameAndValue MessageArgument:
	//	(=> name=Name |
	//	// These are only here to trigger content-assist for the signal attributes
	//	// and operation parameters.  They can never be matched because the name
	//	// always will be.
	//	=> property=[uml::Property] | => parameter=[uml::Parameter]) '=' MessageRequestValue;
	public MessageRequestNameAndValueElements getMessageRequestNameAndValueAccess() {
		return pMessageRequestNameAndValue;
	}
	
	public ParserRule getMessageRequestNameAndValueRule() {
		return getMessageRequestNameAndValueAccess().getRule();
	}

	//fragment MessageRequestValue returns MessageArgument:
	//	value=Value;
	public MessageRequestValueElements getMessageRequestValueAccess() {
		return pMessageRequestValue;
	}
	
	public ParserRule getMessageRequestValueRule() {
		return getMessageRequestValueAccess().getRule();
	}

	//ReplyMessage:
	//	AssignmentTarget? (=> name=Name |
	//	// This is only here to trigger content-assist for operation signatures.
	//	// It can never be matched because the name always will be.
	//	=> operation=[uml::Operation]) ('(' MessageReplyOutputs? ')')?
	//	value=OutputValue?;
	public ReplyMessageElements getReplyMessageAccess() {
		return pReplyMessage;
	}
	
	public ParserRule getReplyMessageRule() {
		return getReplyMessageAccess().getRule();
	}

	//fragment AssignmentTarget:
	//	=> target=[uml::ConnectableElement|QName] '=';
	public AssignmentTargetElements getAssignmentTargetAccess() {
		return pAssignmentTarget;
	}
	
	public ParserRule getAssignmentTargetRule() {
		return getAssignmentTargetAccess().getRule();
	}

	//fragment MessageReplyOutputs:
	//	outputs+=MessageReplyOutput ("," outputs+=MessageReplyOutput)*;
	public MessageReplyOutputsElements getMessageReplyOutputsAccess() {
		return pMessageReplyOutputs;
	}
	
	public ParserRule getMessageReplyOutputsRule() {
		return getMessageReplyOutputsAccess().getRule();
	}

	//MessageReplyOutput:
	//	AssignmentTarget parameter=[uml::Parameter] value=OutputValue? | parameter=[uml::Parameter] value=OutputValue;
	public MessageReplyOutputElements getMessageReplyOutputAccess() {
		return pMessageReplyOutput;
	}
	
	public ParserRule getMessageReplyOutputRule() {
		return getMessageReplyOutputAccess().getRule();
	}

	//OutputValue MessageArgument:
	//	':' value=Value;
	public OutputValueElements getOutputValueAccess() {
		return pOutputValue;
	}
	
	public ParserRule getOutputValueRule() {
		return getOutputValueAccess().getRule();
	}

	///**
	// * We have to simulate the UML ValueSpecification instead of using it as is
	// * because otherwise the user will see warnings in the direct editor about
	// * elements that must be owned (the value specifications) not having owners
	// * (in the UML sense).
	// */ Value:
	//	BooleanValue |
	//	=> IntegerValue |
	//	=> UnlimitedNaturalValue |
	//	=> RealValue | NullValue | StringValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//BooleanValue:
	//	value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//IntegerValue:
	//	value=INT;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//UnlimitedNaturalValue:
	//	value=UnlimitedNatural;
	public UnlimitedNaturalValueElements getUnlimitedNaturalValueAccess() {
		return pUnlimitedNaturalValue;
	}
	
	public ParserRule getUnlimitedNaturalValueRule() {
		return getUnlimitedNaturalValueAccess().getRule();
	}

	//RealValue:
	//	value=Double;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}

	//NullValue:
	//	{NullValue} 'null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//UndefinedRule:
	//	value='<Undefined>';
	public UndefinedRuleElements getUndefinedRuleAccess() {
		return pUndefinedRule;
	}
	
	public ParserRule getUndefinedRuleRule() {
		return getUndefinedRuleAccess().getRule();
	}

	//Double ecore::EDouble:
	//	INT | REAL;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//UnlimitedNatural ecore::EIntegerObject:
	//	Integer | '*';
	public UnlimitedNaturalElements getUnlimitedNaturalAccess() {
		return pUnlimitedNatural;
	}
	
	public ParserRule getUnlimitedNaturalRule() {
		return getUnlimitedNaturalAccess().getRule();
	}

	//Integer ecore::EIntegerObject:
	//	INT | NEG_INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Boolean ecore::EBoolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//QName:
	//	Name ('::' Name)*;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//Name:
	//	ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//terminal fragment DIGITS:
	//	DIGIT DIGIT0*;
	public TerminalRule getDIGITSRule() {
		return tDIGITS;
	} 

	//terminal fragment DIGIT:
	//	'1'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//terminal fragment DIGIT0:
	//	'0' | DIGIT;
	public TerminalRule getDIGIT0Rule() {
		return tDIGIT0;
	} 

	//terminal fragment DECIMAL:
	//	(INT | NEG_INT) | ('-' | '+')? DIGIT0? '.' DIGITS;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	} 

	//@ Override terminal INT returns ecore::EInt:
	//	'+'? DIGITS;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal NEG_INT returns ecore::EInt:
	//	'-' DIGITS;
	public TerminalRule getNEG_INTRule() {
		return tNEG_INT;
	} 

	//terminal REAL returns ecore::EDouble:
	//	DECIMAL (('e' | 'E') ('-' | '+')? DIGITS)?;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* | '\''->'\'';
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*' !'@'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r' | '@')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	} 

	//terminal INTEGER_VALUE:
	//	('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	//	'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getINTEGER_VALUERule() {
		return gaCommon.getINTEGER_VALUERule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
