/*
 * generated by Xtext
 */
package org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.services.LwMessageGrammarAccess;

public class LwMessageParser extends AbstractContentAssistParser {
	
	@Inject
	private LwMessageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr.internal.InternalLwMessageParser createParser() {
		org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr.internal.InternalLwMessageParser result = new org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr.internal.InternalLwMessageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractMessageAccess().getAlternatives(), "rule__AbstractMessage__Alternatives");
					put(grammarAccess.getAbstractRequestMessageAccess().getAlternatives(), "rule__AbstractRequestMessage__Alternatives");
					put(grammarAccess.getRequestMessageAccess().getAlternatives_0(), "rule__RequestMessage__Alternatives_0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getAlternatives(), "rule__MessageRequestArguments__Alternatives");
					put(grammarAccess.getMessageRequestArgumentAccess().getAlternatives(), "rule__MessageRequestArgument__Alternatives");
					put(grammarAccess.getMessageRequestNameAndValueAccess().getAlternatives_0(), "rule__MessageRequestNameAndValue__Alternatives_0");
					put(grammarAccess.getReplyMessageAccess().getAlternatives_1(), "rule__ReplyMessage__Alternatives_1");
					put(grammarAccess.getMessageReplyOutputAccess().getAlternatives(), "rule__MessageReplyOutput__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getDoubleAccess().getAlternatives(), "rule__Double__Alternatives");
					put(grammarAccess.getUnlimitedNaturalAccess().getAlternatives(), "rule__UnlimitedNatural__Alternatives");
					put(grammarAccess.getIntegerAccess().getAlternatives(), "rule__Integer__Alternatives");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getRequestMessageAccess().getGroup(), "rule__RequestMessage__Group__0");
					put(grammarAccess.getRequestMessageAccess().getGroup_1(), "rule__RequestMessage__Group_1__0");
					put(grammarAccess.getAnyMessageAccess().getGroup(), "rule__AnyMessage__Group__0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getGroup_0(), "rule__MessageRequestArguments__Group_0__0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getGroup_0_1(), "rule__MessageRequestArguments__Group_0_1__0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getGroup_1(), "rule__MessageRequestArguments__Group_1__0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getGroup_1_1(), "rule__MessageRequestArguments__Group_1_1__0");
					put(grammarAccess.getMessageRequestArgumentAccess().getGroup_0(), "rule__MessageRequestArgument__Group_0__0");
					put(grammarAccess.getMessageRequestNameAndValueAccess().getGroup(), "rule__MessageRequestNameAndValue__Group__0");
					put(grammarAccess.getReplyMessageAccess().getGroup(), "rule__ReplyMessage__Group__0");
					put(grammarAccess.getReplyMessageAccess().getGroup_2(), "rule__ReplyMessage__Group_2__0");
					put(grammarAccess.getAssignmentTargetAccess().getGroup(), "rule__AssignmentTarget__Group__0");
					put(grammarAccess.getMessageReplyOutputsAccess().getGroup(), "rule__MessageReplyOutputs__Group__0");
					put(grammarAccess.getMessageReplyOutputsAccess().getGroup_1(), "rule__MessageReplyOutputs__Group_1__0");
					put(grammarAccess.getMessageReplyOutputAccess().getGroup_0(), "rule__MessageReplyOutput__Group_0__0");
					put(grammarAccess.getMessageReplyOutputAccess().getGroup_1(), "rule__MessageReplyOutput__Group_1__0");
					put(grammarAccess.getOutputValueAccess().getGroup(), "rule__OutputValue__Group__0");
					put(grammarAccess.getNullValueAccess().getGroup(), "rule__NullValue__Group__0");
					put(grammarAccess.getQNameAccess().getGroup(), "rule__QName__Group__0");
					put(grammarAccess.getQNameAccess().getGroup_1(), "rule__QName__Group_1__0");
					put(grammarAccess.getRequestMessageAccess().getNameAssignment_0_0(), "rule__RequestMessage__NameAssignment_0_0");
					put(grammarAccess.getRequestMessageAccess().getSignalAssignment_0_1(), "rule__RequestMessage__SignalAssignment_0_1");
					put(grammarAccess.getRequestMessageAccess().getOperationAssignment_0_2(), "rule__RequestMessage__OperationAssignment_0_2");
					put(grammarAccess.getMessageRequestArgumentsAccess().getArgumentsAssignment_0_0(), "rule__MessageRequestArguments__ArgumentsAssignment_0_0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getArgumentsAssignment_0_1_1(), "rule__MessageRequestArguments__ArgumentsAssignment_0_1_1");
					put(grammarAccess.getMessageRequestArgumentsAccess().getArgumentsAssignment_1_0(), "rule__MessageRequestArguments__ArgumentsAssignment_1_0");
					put(grammarAccess.getMessageRequestArgumentsAccess().getArgumentsAssignment_1_1_1(), "rule__MessageRequestArguments__ArgumentsAssignment_1_1_1");
					put(grammarAccess.getMessageRequestNameAndValueAccess().getNameAssignment_0_0(), "rule__MessageRequestNameAndValue__NameAssignment_0_0");
					put(grammarAccess.getMessageRequestNameAndValueAccess().getPropertyAssignment_0_1(), "rule__MessageRequestNameAndValue__PropertyAssignment_0_1");
					put(grammarAccess.getMessageRequestNameAndValueAccess().getParameterAssignment_0_2(), "rule__MessageRequestNameAndValue__ParameterAssignment_0_2");
					put(grammarAccess.getMessageRequestValueAccess().getValueAssignment(), "rule__MessageRequestValue__ValueAssignment");
					put(grammarAccess.getReplyMessageAccess().getNameAssignment_1_0(), "rule__ReplyMessage__NameAssignment_1_0");
					put(grammarAccess.getReplyMessageAccess().getOperationAssignment_1_1(), "rule__ReplyMessage__OperationAssignment_1_1");
					put(grammarAccess.getReplyMessageAccess().getValueAssignment_3(), "rule__ReplyMessage__ValueAssignment_3");
					put(grammarAccess.getAssignmentTargetAccess().getTargetAssignment_0(), "rule__AssignmentTarget__TargetAssignment_0");
					put(grammarAccess.getMessageReplyOutputsAccess().getOutputsAssignment_0(), "rule__MessageReplyOutputs__OutputsAssignment_0");
					put(grammarAccess.getMessageReplyOutputsAccess().getOutputsAssignment_1_1(), "rule__MessageReplyOutputs__OutputsAssignment_1_1");
					put(grammarAccess.getMessageReplyOutputAccess().getParameterAssignment_0_1(), "rule__MessageReplyOutput__ParameterAssignment_0_1");
					put(grammarAccess.getMessageReplyOutputAccess().getValueAssignment_0_2(), "rule__MessageReplyOutput__ValueAssignment_0_2");
					put(grammarAccess.getMessageReplyOutputAccess().getParameterAssignment_1_0(), "rule__MessageReplyOutput__ParameterAssignment_1_0");
					put(grammarAccess.getMessageReplyOutputAccess().getValueAssignment_1_1(), "rule__MessageReplyOutput__ValueAssignment_1_1");
					put(grammarAccess.getOutputValueAccess().getValueAssignment_1(), "rule__OutputValue__ValueAssignment_1");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
					put(grammarAccess.getIntegerValueAccess().getValueAssignment(), "rule__IntegerValue__ValueAssignment");
					put(grammarAccess.getUnlimitedNaturalValueAccess().getValueAssignment(), "rule__UnlimitedNaturalValue__ValueAssignment");
					put(grammarAccess.getRealValueAccess().getValueAssignment(), "rule__RealValue__ValueAssignment");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
					put(grammarAccess.getUndefinedRuleAccess().getValueAssignment(), "rule__UndefinedRule__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr.internal.InternalLwMessageParser typedParser = (org.eclipse.papyrus.uml.diagram.lightweightsequence.message.xtext.ui.contentassist.antlr.internal.InternalLwMessageParser) parser;
			typedParser.entryRuleAbstractMessage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LwMessageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LwMessageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
